1.根据不同操作系统加载不同的Makefile
OS=$(shell uname)
include 	Makefile.$(OS)


2.  $<      表示所有的依赖目标集
    $@      表示目标集
    
3.显示命令
    通常，make 会把其要执行的命令行在命令执行前输出到屏幕上。当我们用"@"字符在命
令行前，那么，这个命令将不被 make 显示出来，最具代表性的例子是，我们用这个功能来
像屏幕显示一些信息。如：
@echo 正在编译 XXX 模块......

4.set -e
    "set -e"这句语句告诉bash如果任何语句的执行结果不是true则应该退出。这样的好处
是防止错误像滚雪球般变大导致一个致命的错误，而这些错误本应该在之前就被处理掉。如
果要增加可读性，可以使用set -o errexit，它的作用与set -e相同。
    使用-e帮助你检查错误。如果你忘记检查执行语句的结果，bash会帮你执行。不幸的是，你
将无法检查$?，因为如果执行的语句不是返回0，bash将无法执行到检查的代码。你可以使用
其他的结构:

command    
if [ "$?"-ne 0]; then     
    echo "command failed";     
    exit 1;     
fi

或
command || { echo "command failed"; exit 1; }

5.
include $(sources:.c=.d)
“$(sources:.c=.d)”中的“.c=.d”的意思是做一个替换，把变量
$(sources)所有[.c]的字串都替换成[.d]